/*
 * Copyright 2015 CISIAD, UNED, Spain
 *
 * Licensed under the European Union Public Licence, version 1.1 (EUPL)
 *
 * Unless required by applicable law, this code is distributed
 * on an "AS IS" basis, WITHOUT WARRANTIES OF ANY KIND.
 */

package org.openmarkov.inference.variableElimination;

import java.util.*;

import org.openmarkov.core.action.PNESupport;
import org.openmarkov.core.action.RemoveNodeEdit;
import org.openmarkov.core.exception.*;
import org.openmarkov.core.inference.heuristic.EliminationHeuristic;
import org.openmarkov.core.model.network.*;
import org.openmarkov.core.model.network.potential.*;
import org.openmarkov.core.model.network.potential.operation.DiscretePotentialOperations;
import org.openmarkov.inference.variableElimination.action.CreatePotentialUtility;
import org.openmarkov.inference.variableElimination.operation.CEPotentialOperation;

/**
 * Essential variable elimination algorithm for Bayesian networks and influence diagrams.
 * @author Manuel Arias
 */
public class VariableEliminationCore {

	// Attributes
	/** Minimum threshold by default. */
	protected static final double defLambdaMin = 0.0;
	
	/** Higher threshold by default. */
	protected static final double defLambdaMax = Double.POSITIVE_INFINITY;
	
	/** Minimum threshold applicable to this case. */
	protected double lambdaMin;
	
	/** Higher threshold applicable to this case. */
	protected double lambdaMax;

	private ProbNet markovDecisionNetwork;
	
    private boolean isUnicriterion;
    
	private EliminationHeuristic heuristic;
	
	/** Decision variables with their policies. */
	private Map<Variable, TablePotential> optimalPolicies;

	/**
	 * Whether the utility potentials have been joined into a single CEP potential,
	 * which will be of type <code>GTablePotential</code>. This operation is performed
	 * in the case of cost-effectiveness analysis, just before eliminating the first decision.
	 */
    private boolean thereIsCEPPotential;

	private PNESupport pneSupport;
	
    // Constructors
    /**
     * Initialize data structures and executes the algorithm.
     * @param markovDecisionNetwork <code>ProbNet</code>
     * @param heuristic <code>EliminationHeuristic</code>
     * @param isUnicriterion <code>boolean</code>
     * @throws UnexpectedInferenceException
     */
    public VariableEliminationCore(
    		ProbNet markovDecisionNetwork,
            EliminationHeuristic heuristic,
            boolean isUnicriterion)
            		throws UnexpectedInferenceException {

    	initialize(markovDecisionNetwork, heuristic, isUnicriterion);
		performVariableElimination();
    }

	/**
     * Initialize data structures and executes the algorithm.
	 * This constructor must be used only in bi-criteria analysis.
     * @param markovDecisionNetwork <code>ProbNet</code>
     * @param heuristic <code>EliminationHeuristic</code>
     * @param isUnicriterion <code>boolean</code>
     * @param lambdaMin <code>double</code>
     * @param lambdaMax <code>double</code>
	 * @throws UnexpectedInferenceException 
     */
    public VariableEliminationCore(
    		ProbNet markovDecisionNetwork,
            EliminationHeuristic heuristic,
            boolean isUnicriterion,
            double lambdaMin,
            double lambdaMax)
            	throws UnexpectedInferenceException {
    	
       	this.lambdaMin = lambdaMin;
       	this.lambdaMax = lambdaMax;
    	initialize(markovDecisionNetwork, heuristic, isUnicriterion);
		performVariableElimination();
    }
    	
	// Methods
    /** @throws UnexpectedInferenceException */
    private void performVariableElimination() throws UnexpectedInferenceException {
		Variable variableToDelete;
    	while ((variableToDelete = heuristic.getVariableToDelete()) != null) {
			try {
				eliminateVariable(variableToDelete);
			} catch (UnexpectedInferenceException | PotentialOperationException | CostEffectivenessException |
					NonProjectablePotentialException | DoEditException | WrongCriterionException e) {
				throw new UnexpectedInferenceException(e.getMessage());
			}
		}
	}

	/**
	 * @param variableToDelete
	 * @throws UnexpectedInferenceException
	 * @throws PotentialOperationException
	 * @throws CostEffectivenessException
	 * @throws DoEditException
	 * @throws NonProjectablePotentialException
	 * @throws WrongCriterionException
     */
	@SuppressWarnings("rawtypes")
	private void eliminateVariable(Variable variableToDelete) throws UnexpectedInferenceException, PotentialOperationException, CostEffectivenessException, DoEditException, NonProjectablePotentialException, WrongCriterionException {
		NodeType nodeType = markovDecisionNetwork.getNode(variableToDelete).getNodeType();

		if (!isUnicriterion && nodeType == NodeType.DECISION && !thereIsCEPPotential) {
			createCEPPotential();
		}

		// Extract the potentials that depend on the variable
		List<TablePotential> probPotentials = new ArrayList<>();
		for (Potential potential : markovDecisionNetwork.getProbPotentials(variableToDelete)) {
			probPotentials.add((TablePotential)potential);
			markovDecisionNetwork.removePotential(potential);
		}
		List<TablePotential> utilityPotentials = new ArrayList<>();
		for (Potential potential : markovDecisionNetwork.getUtilityPotentials(variableToDelete)) {
			utilityPotentials.add((TablePotential)potential);
			markovDecisionNetwork.removePotential(potential);
		}

		if (utilityPotentials.size() > 1) {
			utilityPotentials = sumByCriterion(utilityPotentials);
		}

		RemoveNodeEdit removeNodeEdit = new RemoveNodeEdit(markovDecisionNetwork, variableToDelete);
		pneSupport.doEdit(removeNodeEdit);

		if (nodeType == NodeType.CHANCE) { // Remove chance variable
			if (utilityPotentials.isEmpty()) {
				// add the marginal probability to the network
				markovDecisionNetwork.addPotential(DiscretePotentialOperations.
						multiplyAndMarginalize(probPotentials, variableToDelete));
			} else {
				TablePotential jointProbability = DiscretePotentialOperations.multiply(probPotentials);
				jointProbability.setPotentialRole(PotentialRole.JOINT_PROBABILITY);
				TablePotential marginalProbability = DiscretePotentialOperations.
						marginalize(jointProbability, variableToDelete);
				TablePotential conditionalProbability = DiscretePotentialOperations.
						divide(jointProbability, marginalProbability);

				List<Variable> orderedVariables = new ArrayList<>();
				orderedVariables.add(variableToDelete);
				for (Variable variable : conditionalProbability.getVariables()) {
					if (variable != variableToDelete) {
						orderedVariables.add(variable);
					}
				}
				conditionalProbability = DiscretePotentialOperations.reorder(conditionalProbability, orderedVariables);
				conditionalProbability.setPotentialRole(PotentialRole.CONDITIONAL_PROBABILITY);
				markovDecisionNetwork.addPotential(marginalProbability);

				if (isUnicriterion || !thereIsCEPPotential) {
					// eliminate the chance variable as in the unicriterion case
					for (TablePotential utilityPotential : utilityPotentials) {
						Potential marginalizedUtilityPotential = DiscretePotentialOperations.
								multiplyAndMarginalize(conditionalProbability, utilityPotential, variableToDelete);
						marginalizedUtilityPotential.setCriterion(utilityPotential.getCriterion()); // Set as utility potential
						markovDecisionNetwork.addPotential(marginalizedUtilityPotential);
					}
				} else {
					GTablePotential utilityPotential = (GTablePotential)utilityPotentials.get(0);
					GTablePotential newUtilityPotential = CEPotentialOperation.multiplyAndMarginalize(
							conditionalProbability,	utilityPotential, variableToDelete);
					newUtilityPotential.setCriterion(utilityPotential.getCriterion()); // Set as utility potential
					markovDecisionNetwork.addPotential(newUtilityPotential);

				}
			}
		} else { // Remove decision variable
			// project the probability potentials
			if(!probPotentials.isEmpty()) {
				TablePotential jointProbability = DiscretePotentialOperations.multiply(probPotentials);
				jointProbability.setPotentialRole(PotentialRole.JOINT_PROBABILITY);
				Potential projectedOutPotential = DiscretePotentialOperations.projectOutVariable(variableToDelete, jointProbability);
				if(projectedOutPotential != null) {
					markovDecisionNetwork.addPotential(projectedOutPotential);
				}
			}
			// maximize the utility potentials
			if (isUnicriterion) {
				List<TablePotential> potentials = DiscretePotentialOperations.
						maxOutVariable(variableToDelete, utilityPotentials);
				markovDecisionNetwork.addPotential(potentials.get(0));
				optimalPolicies.put(variableToDelete, potentials.get(1));

			} else {
				GTablePotential utilityPotential =
						CEPotentialOperation.ceMaximize((GTablePotential) utilityPotentials.get(0), variableToDelete);
				utilityPotential.setCriterion(utilityPotentials.get(0).getCriterion()); // Set as utility potential
				markovDecisionNetwork.addPotential(utilityPotential);
			}
		}
	}

	private List<TablePotential> sumByCriterion(List<TablePotential> utilityPotentials) {
		// create the set of criteria
		Set<Criterion> criteria = new HashSet<>();
		for (TablePotential potential : utilityPotentials) {
			criteria.add(potential.getCriterion());
		}

		// create an empty list for each criterion
		Map<Criterion, List<TablePotential>> potentialsByCriterion = new HashMap<>();
		for (Criterion criterion : criteria) {
			List<TablePotential> criterionList = new ArrayList<>();
			potentialsByCriterion.put(criterion, criterionList);
		}

		// put each potential in its list
		for (TablePotential potential : utilityPotentials) {
			potentialsByCriterion.get(potential.getCriterion()).add(potential);
		}

		// sum the potentials for each criterion
		List<TablePotential> utilityPotentialsByCriterion = new ArrayList<>(criteria.size());
		for (Criterion criterion : criteria) {
			TablePotential outputUtilityPotentialByCriterion = DiscretePotentialOperations.sum(potentialsByCriterion.get(criterion));
			outputUtilityPotentialByCriterion.setCriterion(criterion);
			utilityPotentialsByCriterion.add(outputUtilityPotentialByCriterion);
		}
		return utilityPotentialsByCriterion;
	}


	/**
	 * Collects all the utility potentials, removes them from the network, and joins them
	 * into a GTablePotential of <code>CEP</code>s, which is added to the network and returned.
	 * @return a <code>GTablePotential</code> of <code>CEP</code>s */
	@SuppressWarnings("rawtypes")
	public GTablePotential createCEPPotential() throws UnexpectedInferenceException {
		// Join all the utility potentials into a GTablePotential of CEPs
		ArrayList<TablePotential> costPotentials = new ArrayList<TablePotential>();
		ArrayList<TablePotential> effectivenessPotentials = new ArrayList<TablePotential>();

		for(Potential potential : markovDecisionNetwork.getAdditivePotentials()) {
			markovDecisionNetwork.removePotential(potential);
			if (potential.getCriterion().getCECriterion().equals(
					Criterion.CECriterion.Cost)) {
				costPotentials.add((TablePotential) potential);
			} else {
				effectivenessPotentials.add((TablePotential)potential);
			}
		}

		TablePotential costPotential = DiscretePotentialOperations.sum(costPotentials);
		TablePotential effectivenessPotential = DiscretePotentialOperations.sum(effectivenessPotentials);

		GTablePotential utilityPotential = null;
		try {
			utilityPotential = CreatePotentialUtility.createCEPotential(
					costPotential, effectivenessPotential, lambdaMin, lambdaMax);
			utilityPotential.setCriterion(new Criterion("#{COST-EFFECTIVENESS}#")); // Set as utility potential
			markovDecisionNetwork.addPotential(utilityPotential);
		} catch (CostEffectivenessException e) {
			throw new UnexpectedInferenceException(e.getMessage());
		}
		thereIsCEPPotential = true;
		return utilityPotential;
	}

	/** @return <code>Map</code> with key = <code>Variable</code> and value = <code>Potential</code> */
    public Map<? extends Variable, ? extends Potential> getOptimalPolicies() {
        return optimalPolicies;
    }

	/**
	 * @param decisionVariable
	 * @return The policy of <code>decisionVariable</code>. <code>Potential</code>
	 */
	public Potential getOptimalPolicy(Variable decisionVariable) {
		return optimalPolicies.get(decisionVariable);
	}

	/**
	 * @return. <code>TablePotential</code>
	 * @throws UnexpectedInferenceException 
	 */
	public TablePotential getUtility() throws UnexpectedInferenceException {
		List<Potential> utilityPotentials = markovDecisionNetwork.getAdditivePotentials();

		TablePotential utility;
		if (utilityPotentials.isEmpty()) {
			utility = new TablePotential(null); // Utility = 0.0, without variables.
			utility.setCriterion(new Criterion()); // Set this potential as additive with the "Default" criterion type.
		} else if (utilityPotentials.size() == 1) {
			utility = (TablePotential) utilityPotentials.get(0);
		} else {
			if (isUnicriterion){
				// sum the utility potentials
				List<TablePotential> utilityTablePotentials = new ArrayList<>();
				for (Potential potential : utilityPotentials) {
					utilityTablePotentials.add((TablePotential)potential);
				}
				utility = DiscretePotentialOperations.sum(utilityTablePotentials);
			} else {
				if (!thereIsCEPPotential) {
					utility = createCEPPotential();
				} else {
					utility = (TablePotential) utilityPotentials.get(0);
				}
			}
		}
		return utility;
	}

	/** @return A <code>TablePotential</code> that is the result of the multiplication 
	 * of all the probability potentials. */
	public TablePotential getProbability() {
		List<TablePotential> probPotentials = new ArrayList<>();
		List<Potential> allPotentials = markovDecisionNetwork.getPotentials();
		for (Potential potential : allPotentials) {
			if (!potential.isAdditive()) {
				probPotentials.add((TablePotential)potential);
			}
		}
		return DiscretePotentialOperations.multiply(probPotentials);
	}

	/**
	 * Common code of the two constructors.
	 * @param markovDecisionNetwork <code>ProbNet</code>
	 * @param heuristic <code>EliminationHeuristic</code>
	 * @param isUnicriterion
	 */
	private void initialize(ProbNet markovDecisionNetwork, 
			EliminationHeuristic heuristic, 
			boolean isUnicriterion){

		thereIsCEPPotential = false;
		this.markovDecisionNetwork = markovDecisionNetwork;
        this.heuristic = heuristic;
        
        pneSupport = markovDecisionNetwork.getPNESupport();
        pneSupport.addUndoableEditListener(heuristic);

        this.isUnicriterion = isUnicriterion;

        if (!isUnicriterion) {
        	lambdaMin = defLambdaMin;
        	lambdaMax = defLambdaMax;
		}
		optimalPolicies = new LinkedHashMap<Variable, TablePotential>();
		// The iterators through LinkedHashMap follows the insertion order, which can be useful later
	}

	public ProbNet getMarkovDecisionNetwork(){
		return this.markovDecisionNetwork;
	}

}
